name: CMake

on:
  push:
    branches: [conan2_support]
  pull_request:
    branches: [conan2_support]

jobs:
  build:
    name: ${{ matrix.settings.name }} ${{ matrix.configuration }}
    runs-on: ${{ matrix.settings.os }}
    strategy:
      matrix:
        configuration: [ "Release", "Debug" ]
        settings:
        - {
            name: "Ubuntu GCC-12",
            os: ubuntu-20.04,
            compiler: { type: GCC, version: 12, conan: "gcc", cc: "gcc-12", cxx: "g++-12", std: 20 },
            lib: "libstdc++11"
          }

    steps:
      - uses: actions/checkout@v2

      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Cache Conan data
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/.conan2/p
          key: ${{ hashFiles('**/conanfile.py') }}-build-${{ matrix.settings.os }}-${{ matrix.configuration }}-${{ matrix.settings.lib }}
          restore-keys: |
            ${{ hashFiles('**/conanfile.py') }}-build-${{ matrix.settings.os }}-${{ matrix.configuration }}-
            ${{ hashFiles('**/conanfile.py') }}-build-${{ matrix.settings.os }}-  

      - name: Add msbuild to PATH
        if: matrix.settings.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          vs-version: "16.5"

      - name: Install Latest GCC 
        if: matrix.settings.compiler.type == 'GCC'
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ matrix.settings.compiler.version }}
          platform: x64

      - name: Install Latest libstdC++11
        if: matrix.settings.compiler.type == 'CLANG' && matrix.settings.lib == 'libstdc++11'
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 12
          platform: x64

      - name: Install Clang
        if: matrix.settings.compiler.type == 'CLANG'
        uses: egor-tensin/setup-clang@v1
        with:
          version: ${{ matrix.settings.compiler.version }}
          platform: x64

      - name: Select Xcode ${{matrix.settings.compiler.version}}
        if: matrix.settings.os == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '${{matrix.settings.compiler.version}}'

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Conan Package Tools
        run: |
          pip install -U conan

      - name: Configure Conan
        shell: bash
        run: |
          conan profile detect --force
          sed -i.backup '/^\[settings\]$/,/^\[/ s/^build_type=.*/build_type=${{ matrix.configuration }}/' .conan2/profiles/default
          sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler.cppstd=.*/compiler.cppstd=${{ matrix.settings.compiler.std }}/' .conan2/profiles/default
          if [[ "${{ matrix.settings.compiler.type }}" == "GCC" || "${{ matrix.settings.compiler.type }}" == "CLANG" ]]; then
            sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler=.*/compiler=${{ matrix.settings.compiler.conan }}/' .conan2/profiles/default
            sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler.version=.*/compiler.version=${{ matrix.settings.compiler.version }}/' .conan2/profiles/default
            sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler.libcxx=.*/compiler.libcxx=${{ matrix.settings.lib }}/' .conan2/profiles/default
          fi
          conan profile show -pr default

      - name: Configure Install
        shell: bash
        run: |
          conan install "${{github.workspace}}" --build missing -pr:b default -c tools.cmake.cmaketoolchain:generator="Ninja Multi-Config"

      - name: Configure Conan Build
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
           source build/generators/conanbuild.sh

      - name: Configure CMake
        shell: bash
        run: |
          source build/generators/conanbuild.sh
          cmake --preset conan-default -DENABLE_ADDRESS_SANITIZER=ON -DENABLE_UNDEFINED_BEHAVIOUR_SANITIZER=ON

      - name: Conan Preset
        shell: bash
        run: echo "CONAN_PRESET=conan-$(echo ${{matrix.configuration}} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build
        shell: bash
        run: |
          source build/generators/conanbuild.sh
          cmake --build --preset ${{ env.CONAN_PRESET }}
